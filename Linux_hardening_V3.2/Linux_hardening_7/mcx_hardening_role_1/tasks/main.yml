#SPDX-License-Identifier: MIT-0
---
(1.1.1.2)		Ensure freevxfs kernel module is not available 
(1.1.1.3)		Ensure hfs kernel module is not available 
(1.1.1.4)		Ensure hfsplus kernel module is not available 
(1.1.1.5)		Ensure jffs2 kernel module is not available 
(1.1.1.8)		Ensure usb-storage kernel module is not available
# tasks file for ./mcx_hardening_role_1
NOTE: whatever kernel modules to disable we can add its name in this
# mcx_hardening_role_1/defaults/main.yml

kernel_modules_to_disable:
  - name: freevxfs
    type: fs
  - name: hfs
    type: fs
  - name: hfsplus
    type: fs
  - name: jffs2
    type: fs
  - name: usb-storage
    type: drivers

-----------------------------------------------------------------------------
# mcx_hardening_role_1/templates/modprobe.conf.j2

# This file was generated by Ansible to disable kernel module: {{ module.name }}
install {{ module.name }} /bin/false
blacklist {{ module.name }}
-----------------------------------------------------------
- name: "Check if module '{{ item.name }}' exists on disk"
  stat:
    path: "/lib/modules/{{ ansible_kernel }}/kernel/{{ item.type }}/{{ item.name | replace('-', '_') }}.ko"
  register: module_check
  loop: "{{ kernel_modules_to_disable }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Create modprobe.d config to disable module '{{ item.0.name }}'"
  template:
    src: modprobe.conf.j2
    dest: "/etc/modprobe.d/{{ item.0.name }}.conf"
    owner: root
    group: root
    mode: '0644'
  when: item.1.stat.exists
  loop: "{{ kernel_modules_to_disable | zip(module_check.results) }}"
  loop_control:
    label: "{{ item.0.name }}"
  vars:
    module: "{{ item.0 }}"

- name: "Get list of loaded kernel modules"
  shell: "lsmod | awk '{print $1}' | tail -n +2"
  register: loaded_modules
  changed_when: false

- name: "Unload module '{{ item.name }}' if loaded"
  shell: "modprobe -r {{ item.name | replace('-', '_') }}"
  when: (item.name | replace('-', '_')) in loaded_modules.stdout_lines
  ignore_errors: true
  loop: "{{ kernel_modules_to_disable }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Verify module '{{ item.name }}' is not loaded"
  shell: "lsmod | grep -q {{ item.name | replace('-', '_') }}"
  register: lsmod_check
  failed_when: lsmod_check.rc == 0
  changed_when: false
  loop: "{{ kernel_modules_to_disable }}"
  loop_control:
    label: "{{ item.name }}"
