
---
# tasks file for max_hardening_7_role

- name: 1.1.8.1_to_3 Ensure nodev, noexec, and nosuid options set on /dev/shm partition (Automated) | Add options
  shell: |
    sed -i -E '/\/dev\/shm\s/ {/rw,nodev,noexec,nosuid,relatime/! s/defaults/defaults,rw,nodev,noexec,nosuid,relatime /}' /etc/fstab
- name: 1.1.8.1_to_3 Ensure nodev, noexec, and nosuid options set on /dev/shm partition (Automated) | Remount
  shell: mount -o remount /dev/shm
  ignore_errors: yes



- name: 1.4.1 Ensure bootloader password is set (Automated)
  ansible.builtin.shell: |
    echo -e "GRUB2_PASSWORD=$(echo -e 'Xcm@765321\nXcm@765321' | grub2-mkpasswd-pbkdf2 | grep -o 'grub.pbkdf2.sha512.*')" > /boot/grub2/user.cfg
    grub2-mkconfig -o /boot/grub2/grub.cfg



- name: 1.4.3 Ensure authentication is required when booting into rescue mode
  become: yes
  block:
    - name: create file  /etc/systemd/system/rescue.service.d/00-require-auth.conf
      file:
        path:  /etc/systemd/system/rescue.service.d
        state: directory
        mode: '0755'
    - name: crate file to enforce authentication
      copy:
        dest: /etc/systemd/system/rescue.service.d/00-require-auth.conf
        content: |
          [Service]
          ExecStart=-/usr/lib/systemd/systemd-sulogin-shell rescue
        owner: root
        group: root
        mode: '0644'

    - name: reload required
      command: systemctl daemon-reload

- name: 1.6.1.7 Ensure SETroubleshoot is not installed (Automated)
  yum:
    name: setroubleshoot
    state: absent
  ignore_errors: true

- name: 1.7.1 Ensure message of the day is configured properly
  become: yes
  block:
     - name: Configure MOTD file
       copy:
         dest: /etc/motd
         content: |
           Welcome to the system. Please adhere to the site policy
           unauthorized access is prohabited
         owner: root
         group: root
         mode: '0644'

#- name: 1.10 Ensure system-wide crypto policy is not legacy
#  block:
#    - name: Set the system-wide crypto policy to default
#      command:
#        cmd: update-crypto-policies --set DEFAULT


- name: 2.2.18 Ensure nfs-utils is not installed or the nfs-server service is masked (Automated)
  yum:
    name: nfs-utils
    state: absent
  ignore_errors: true

- name: 2.2.19  Ensure rpcbind is not installed or the rpcbind services are masked (Automated)
  yum:
    name: rpcbind
    state: absent
  ignore_errors: true

#- name: 3.2.1 Ensure IP forwarding is disabled (Automated)
#  shell: 'printf " net.ipv4.ip_forward = 0 " >> /etc/sysctl.d/60-netipv4_sysctl.conf'

#- name: 3.3.6 Ensure bogus ICMP responses are ignored (Automated)
#  shell: 'printf " net.ipv4.icmp_ignore_bogus_error_responses = 1 " >> /etc/sysctl.d/60-netipv4_sysctl.conf'

- name: 4.1.3.3 hardening and monitoring sudo log file
  block:
    - name: Ensure /etc/audit/rules.d/50-sudo.rules exists
      copy:
        dest: /etc/audit/rules.d/50-sudo.rules
        content: "-w /var/log/sudo.log -p wa -k sudo_log_file"
        owner: root
        group: root
        mode: '0644'
    #  when: not (stat(path='/etc/audit/rules.d/50-sudo.rules').stat.exists)

    - name: Load audit rules
      command: augenrules --load
      ignore_errors: true
#    - name: Check if reboot is required
#      shell: "if [[ $(auditctl -s | grep 'enabled') =~ '2' ]]; then echo 'Reboot required'; else echo 'No reboot required'; fi"
#      register: reboot_required
#      changed_when: false

- name: 4.1.3.6 Ensure use of privileged commands are collected (Automated)
  block:
    - name: 4.1.3.6 Ensure use of privileged commands are collected (Automated) | Create or Edit Audit Rules File
      script: script_4_1_3_6.sh

    - name: 4.1.3.6 Ensure use of privileged commands are collected (Automated) | Load Audit Rule
      shell: augenrules --load
      ignore_errors: true

    - name: 4.1.3.6 Ensure use of privileged commands are collected (Automated) | Set Audit Rules Immutable
      become: yes
      shell: |
        # Make the audit rules immutable (non-modifiable)
        echo "Setting audit rules as immutable"
        auditctl -e 2  # Enforce the audit system to be immutable
      ignore_errors: true

    - name:  4.1.3.6 Ensure use of privileged commands are collected (Automated) | Check Reboot Requirement
      shell: if [[ $(auditctl -s | grep "enabled") =~ "2" ]]; then printf "Reboot required to load rules."; fi
      register: reboot_required
      changed_when: false



    - name: 4.1.3.6 Ensure use of privileged commands are collected (Automated) | Restart Audit Service
      shell: service auditd restart
 #     when: reboot_required.stdout == "Reboot required to load rules."
      ignore_errors: true


- name: 4.2.2.1.3 Ensure systemd-journal-remote is enabled (Manual) | Enable and start systemd-journal-upload
  service:
    name: systemd-journal-upload.service
    state: started
    enabled: yes
  ignore_errors: true

- name: 4.2.2.1.4 Ensure journald is not configured to recieve logs from a remote client (Automated) | Disable and stop systemd-journal-remote.socket using systemctl
  systemd:
    name: systemd-journal-remote.socket
    state: stopped
    enabled: no
    masked: yes
  ignore_errors: true

- name: 4.2.2.2 Ensure journald service is enbaled (Automated)
  systemd:
    name: systemd-journald
    state: started
    enabled: yes
  register: journald_status
#  debug:
#    msg: "systemd-journald.service is in the correct state"


- name: 4.2.2.5 Ensure journald is not configured to send logs to rsyslog (Manual) | Remove "ForwardToSyslog=yes" from /etc/systemd/journald.conf
  lineinfile:
    path: /etc/systemd/journald.conf
    state: absent
    regexp: "^ForwardToSyslog=yes$"
  notify:
    - Restart systemd-journal-upload

#- name: 4.2.2.6 Ensure the /etc/systemd/journald.conf has correct parameter for log rotation
#  lineinfile:
#    path: /etc/systemd/journald.conf
#    regexp: '^#?(SystemMaxUse|SystemKeepFree|RuntimeMaxUse|RuntimekeepFree|MaxFileSec)='
#    line: "{{ item.key }}={{ item.value }}"
#  with_items:
#    - { key: 'SystemMaxUse', value: '0' }
#    - { key: 'SystemKeepFree', value: '0'}
#    - { key: 'RuntimeMaxUse', value: '0' }
#    - { key: 'RuntimeKeepFree', value: '0' }
 #   - { key: 'MaxFileSec', value: '1 month' }
- name: 4.2.2.6 Restart systemd-journald service to apply change
  systemd:
    name: systemd-journald
    state: restarted
    enabled: yes

      #task executed but need users to add
# - name: 5.2.4 Ensure SSH access is limited (Automated)
#   lineinfile:
#     path: /etc/ssh/sshd_config
#     line: "{{ item }}"
#   loop:
#    - AllowUsers <userlist>
#    - AllowGroups <grouplist>
#    - DenyUsers <userlist>
#    - DenyGroups <grouplist>


#- name: 5.2.7 Ensure SSH root login is disabled
#  lineinfile:
#    state: present
#    path: /etc/ssh/sshd_config
#    regexp: "^#?PermitRootLogin"
#    line: "PermitRootLogin yes"
#  notify:
#    - Restart SSHi
#  ignore_errors: true

- name: 5.6.1.4 Ensure inactive password lock is 30 days or less
  shell: useradd -D -f 30


#- name: 5.6.2 Ensure system accounts are secured (Automated)
#  shell: |
#    awk -F: '($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' && $7!~/^(\/usr)?\/sbin\/nologin(\/)?$/ && $7!~/(\/usr)?\/bin\/false(\/)?$/) { print $1 }' /etc/passwd | while read user
#    do
#     usermod -s $(which nologin) $user
#    done
#
#    awk -F: '($1!="root" && $1!~/^\+/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"') {print $1}' /etc/passwd | xargs -I '{}' passwd -S '{}' | awk '($2!="L" && $2!="LK") {print $1}' | while read user
#    do
#     usermod -L $user
#    done
#  become: yes

#- name: 6.1.2 Ensure sticky bit is set on all world-writable directories (Automated)
#  shell: df --local -P | awk '{if (NR!=1) print $6}' | grep -v '^/opt/gts/envs/090/gts/var/cores$' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null | xargs -I '{}' chmod a+t '{}'

- name: 6.1.5 - Ensure permissions on /etc/group are configured
  file:
    path: /etc/group
    state: file
    mode: '0644'
    owner: root
    group: root

- name: 6.1.7 - Ensure permissions on /etc/passwd are configured
  file:
    path: /etc/passwd-
    state: file
    mode: '0644'
    owner: root
    group: root

- name: 6.1.9 - Ensure permissions on /etc/group- are configured
  file:
    path: /etc/group-
    state: file
    mode: '0644'
    owner: root
    group: root


#- name: 5.6.5 Ensure default user umask is 027 or more restrictive (Automated)
#  shell: |
#    grep -RPi '(^|^[^#]*)\s*umask\s+([0-7][0-7][01][0-7]\b|[0-7][0-7][0-7][0- 6]\b|[0-7][01][0-7]\b|[0-7][0-7][0- 6]\b|(u=[rwx]{0,3},)?(g=[rwx]{0,3},)?o=[rwx]+\b|(u=[rwx]{1,3},)?g=[^rx]{1,3}( ,o=[rwx]{0,3})?\b)' /etc/login.defs /etc/profile* /etc/bashrc* | while read file; do
#      sed -i '/umask/s/^[^#]*umask 027/' $file
#    done
#    echo 'umask 027' > /etc/profile.d/set_umask.sh
#    chmod +x /etc/profile.d/set_umask.sh
#  become: yes

- name: 6.2.7 Ensure root PATH Integrity
  block:
    - name: Enusre root PATH is set correctely
      lineinfile:
        path: /etc/environment
        regexp: '^PATH='
        line: 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
        create: yes



















