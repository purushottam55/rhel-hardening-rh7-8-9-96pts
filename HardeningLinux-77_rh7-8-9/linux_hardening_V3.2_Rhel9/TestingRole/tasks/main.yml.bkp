---
#This role is dedicated to test one by one task at a time. This file is soft link      ln TestingRole/tasks/main.yml testHere.yml   ie. shortcut to file


- name: Ensure preauth line is present
  lineinfile:
    path: "{{ item }}"
    line: "auth        required      pam_faillock.so preauth silent audit deny={{ deny }} unlock_time={{ unlock_time }} even_deny_root"
    insertafter: '^auth.*pam_env.so'
    regexp: 'pam_faillock.so.*preauth'
  loop: "{{ auth_files }}"

- name: Ensure authfail line is present
  lineinfile:
    path: "{{ item }}"
    line: "auth        [default=die] pam_faillock.so authfail audit deny={{ deny }} unlock_time={{ unlock_time }} even_deny_root"
    insertafter: '^auth.*pam_unix.so'
    regexp: 'pam_faillock.so.*authfail'
  loop: "{{ auth_files }}"

- name: Ensure unlock_time is set in faillock.conf
  lineinfile:
    path: /etc/security/faillock.conf
    regexp: '^unlock_time\s*='
    line: "unlock_time = {{ unlock_time }}"
  create: yes


















#Below point is available for rhel 8+
#- name: 5.1.2.1.1 Ensure systemd-journald remote is installed
#  yum:
#    name: systemd-journal-remote
#    state: present

#- name: 5.1.2.1.3 Ensure systemd-journald remote is enabled
#  systemd:
#    name: systemd-journal-remote.service
#    enabled: true
#    state: started

#- name: 5.1.2.1.3 Ensure systemd-journald remote upload is enabled
#  systemd:
#    name: systemd-journal-upload.service
#    enabled: true
#    state: started

#- name: 5.1.3 Backup of /etc/logrotate.conf file
#  copy:
#    src: /etc/logrotate.conf
#    dest: "/etc/logrotate.conf.backup-{{ '%Y%m%d%H%M%S' | strftime}}"
#    remote_src: yes
#  ignore_errors: yes

#- name: 5.1.3 Ensure logrotate package is installed
#  yum:
#    name: logrotate
#    state: present

#- name: 5.1.3.1 Ensure /etc/logrotate.conf exists
#  copy:
#    dest: /etc/logrotate.conf
#    content: |
#      daily
#      rotate 7
#      compress
#      missingok
#      notifempty
#      create 0640 root utmp
#      include /etc/logrotate.d
#    mode: '0644'
#    owner: root
#    group: root

#- name: 5.1.3.2 Ensure logrotate is scheduled via cron.daily
#  stat:
#    path: /etc/cron.daily/logrotate
#  register: logrotate_cron

#- name: 5.1.3.3 Warn if logrotate cron job is missing
#  debug:
#    msg: "Logrotate cron is missing in /etc/cron.daily"
#  when: not logrotate_cron.stat.exists






#- name: 6.1.11 Ensure no world writable files exist
#  block:
#    - name: 6.1.11 Ensure no world writable files exist | Get list of world-writable files
#      shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002
#      register: output_6_1_11
#    - name: 6.1.11 Ensure no world writable files exist | Adjust world-writable files if they exist (Configurable)
 #     file:
#        path: '{{ item }}'
# #       mode: o-w
#      loop: "{{ output_6_1_11.stdout_lines }}"
#      when: output_6_1_11.stdout_lines is defined and output_6_1_11.stdout_lines | length > 0


#- name: 6.1.12 Ensure no unowned files or directories exist (Automated)
#  block:
#    - name: 6.1.12 Ensure no unowned files or directories exist (Automated) | Find
#      shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser
#      register: output_6_1_12
#    - name: 6.1.12 Ensure no unowned files or directories exist (Automated) | Fix
#      file:
#        path: "{{ item }}"
#        owner: root
 ##       group: root
 #     loop: "{{ output_6_1_12.stdout_lines }}"
  #    when: output_6_1_12.stdout_lines is defined and output_6_1_12.stdout_lines | length > 0


#- name: 6.1.13 Ensure no ungrouped files or directories exist (Automated)
#  block:
#    - name: 6.1.13 Ensure no ungrouped files or directories exist (Automated) | Find
#      shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup
#      register: output_6_1_13
 #   - name: 6.1.13 Ensure no ungrouped files or directories exist (Automated) | Fix
#      file:
#        path: "{{ item }}"
#        owner: root
#        group: root
#      loop: "{{ output_6_1_13.stdout_lines }}"
#      when: output_6_1_13.stdout_lines is defined and output_6_1_13.stdout_lines | length > 0


#- name: 5.6.2 Ensure system accounts are secured (Automated)
#  block:
#    - name: 5.6.2 Ensure system accounts are secured (Automated) | set system account to non login shell
#      shell: awk -F: ($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' && $7!~/^(\/usr)?\/sbin\/nologin(\/)?$/ && $7!~/(\/usr)?\/bin\/false(\/)?$/) { print $1 } /etc/passwd | while read user; do usermod -s $(which nologin) $user; done
#    - name: 5.6.2 Ensure system accounts are secured (Automated) | lock not root system accounts
#      shell: awk -F ':' '($1!="root" && $1!~/^\+/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"') {print $1}' /etc/passwd | xargs -I '{}' passwd -S '{}' | awk '($2!="L" && $2!="LK") {print $1}' | while read user do usermod -L $user done

#- name: 5.6.2 Ensure system accounts are secured (Automated)
#  block:
#    - name: 5.6.2 Ensure system accounts are secured (Automated) | set system account to non login shell
#      shell: |
#        awk -F: '($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' && $7!~/^(\/usr)?\/sbin\/nologin(\/)?$/ && $7!~/(\/usr)?\/bin\/false(\/)?$/) { print $1 }' /etc/passwd | while read user; do
#          usermod -s $(which nologin) $user
#        done
#
#    - name: 5.6.2 Ensure system accounts are secured (Automated) | lock not root system accounts
#      shell: |
#        awk -F ':' '($1!="root" && $1!~/^\+/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"') {print $1}' /etc/passwd | xargs -I '{}' passwd -S '{}' | awk '($2!="L" && $2!="LK") {print $1}' | while read user; do
#          usermod -L $user
#        done

































#- name: 4.2.2.1.1       Ensure systemd-journal-remote is installed (Manual) | Install systemd-journal-remote package
#  package:
#    name: systemd-journal-remote
#    state: latest
#  ignore_errors: true



# 4.2.2.1.2     Ensure systemd-journal-remote is configured (Manual)

#- name: 4.2.2.1.2       Ensure systemd-journal-remote is configured (Manual) Set configuration options in systemd-journal-upload.conf
#  blockinfile:
#    path: /etc/systemd/journal-upload.conf
#    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item }}"
#    block: |
#      URL=192.168.91.233
#      ServerKeyFile=/etc/ssl/private/journal-upload.pem
#      ServerCertificateFile=/etc/ssl/certs/journal-upload.pem
#      TrustedCertificateFile=/etc/ssl/ca/trusted.pem
#  loop: ['']
#  notify:
#    - Restart systemd-journal-upload
#  ignore_errors: true


# 4.2.2.1.3     Ensure systemd-journal-remote is enabled (Manual)

#- name: 4.2.2.1.3       Ensure systemd-journal-remote is enabled (Manual) | Enable and start systemd-journal-upload
#  service:
#    name: systemd-journal-upload.service
#    state: started
#    enabled: yes
#  ignore_errors: true
#

#- name: 4.2.2.1.4       Ensure journald is not configured to recieve logs from a remote client (Automated) | Disable and stop systemd-journal-remote.socket using systemctl
#  systemd:
#    name: systemd-journal-remote.socket
 ##   state: stopped
 #   enabled: no
 #   masked: yes
  #ignore_errors: true
#
#- name: 4.2.2.1.4      Ensure journald is not configured to recieve logs from a remote client (Automated) | Mask systemd-journal-remote.socket using systemctl
# systemd:
    #  name: systemd-journal-remote.socket
    # state: masked


- name: 4.2.2.1.3       Ensure systemd-journal-remote is enabled (Manual) | Enable and start systemd-journal-upload
  service:
    name: systemd-journald
    state: started
    enabled: yes
  ignore_errors: true


























































































#- name: 5.6.2 Ensure system accounts are secured (Automated)
 # block:
#    - name: 5.6.2 Ensure system accounts are secured (Automated) | set system account to non login shell
#      shell: awk -F: ($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"' && $7!~/^(\/usr)?\/sbin\/nologin(\/)?$/ && $7!~/(\/usr)?\/bin\/false(\/)?$/) { print $1 } /etc/passwd | while read user; do usermod -s $(which nologin) $user; done
#    - name: 5.6.2 Ensure system accounts are secured (Automated) | lock not root system accounts
#      shell: awk -F ':' '($1!="root" && $1!~/^\+/ && $3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"') {print $1}' /etc/passwd | xargs -I '{}' passwd -S '{}' | awk '($2!="L" && $2!="LK") {print $1}' | while read user do usermod -L $user done














































- name: 5.1.2.1.1 Install systemd-jounald-remote
  yum:
    name: systemd-journal-remote
    state: present

#- name: Ensure root password is set
#  shell: grep -i '^root:' /etc/shadow
#  register: root_shadow
  
#- name: debug message
#  debug: 
#    msg: "{{ ansible_hostname }} {{ ansible_default_ipv4.address }} Root password status {{ root_shadow }}"


#- name: 1.9 Ensure updates, patches, and additional security software are installed (Check Only)
#  ansible.builtin.command: yum check-update
#  register: yum_updates
#  ignore_errors: true

#- name: Show available updates
#  ansible.builtin.debug:
#    var: yum_updates.stdout_lines
    

#- name: Find world-writable files (excluding system paths)
#  find:
#    paths: /
#    recurse: yes
#    file_type: file
#    mode: '0002'
#    excludes:
#      - /proc
#      - /sys
#      - /run/user
#      - /snap
 #     - /dev
 #     - /var/lib/containerd
#      - /var/lib/kubelet/pods
#    follow: false
#  register: ww_files

#- name: Remove other write permission from world-writable files
#  ansible.builtin.file:
#    path: "{{ item.path }}"
#    mode: "u=rwX,g=rX,o=rX"
#  loop: "{{ ww_files.files }}"
#  when: item.mode is defined
#  ignore_errors: true
#
#- name: Find world-writable directories (excluding system paths)
#  find:
#    paths: /
#    recurse: yes
#    file_type: directory
#    mode: '0002'
#    excludes:
#      - /proc
#      - /sys
#      - /run/user
 #     - /snap
#      - /dev
#      - /var/lib/containerd
#      - /var/lib/kubelet/pods
 #   follow: false
#  register: ww_dirs
#
#- name: Ensure sticky bit is set on world-writable directories
 ## ansible.builtin.file:
#    path: "{{ item.path }}"
#    mode: "{{ (item.mode | int(base=8)) | bitwise_or(0o1000) | octal }}"
#  loop: "{{ ww_dirs.files }}"
#  when: item.mode is defined and ((item.mode | int(base=8)) & 0o1000) == 0
#  ignore_errors: true
#







#-------------------------------------------------
#OS = RHEL 7,8,9	7,8(1.2.1) 9(1.2.1.1)	Ensure GPG keys are configured 
#- name: "1.2.1 | AUDIT | Ensure GPG keys are configured" 
#  ansible.builtin.shell: "PKG=`rpm -qf {{ rpm_gpg_key }}` && rpm -q --queryformat \"%{PACKAGER} %{SIGPGP:pgpsig}\\n\" \"${PKG}\" | grep \"^{{ rpm_packager }}.*Key.ID.{{ rpm_key }}\""
#  changed_when: false

#-------------------------------------------------
#OS = RHEL 7,8,9	7,8(1.2.4) 9(1.2.1.4)	Ensure package manager repositories are configured 
#- name: "1.2.4 | AUDIT | Ensure package manager repositories are configured"
#  vars:
#      warn_control_id: '1.2.4'
#  block:
#      - name: "1.2.4 | AUDIT | Ensure package manager repositories are configured | Get repo list"
#        ansible.builtin.shell: yum repolist
#        changed_when: false
#        failed_when: false
#        register: dnf_configured
#        check_mode: false
#
#      - name: "1.2.4 | AUDIT | Ensure package manager repositories are configured | Display repo list"
#        ansible.builtin.debug:
#            msg:
#               - "Warning!! Below are the configured repos. Please review and make sure all align with site policy"
#                - "{{ dnf_configured.stdout_lines }}"
#
#      - name: "1.2.4 | AUDIT | Ensure package manager repositories are configured | Warn Count"
#        ansible.builtin.import_tasks:
#            file: warning_facts.yml

#-------------------------------------------------
#OS = RHEL 7,8,9	7,8(1.2.5) 9(1.2.2.1)	Ensure updates, patches, and additional security software are installed 
#- name: "1.2.5 | PATCH | Ensure updates, patches, and additional security software are installed"
#  notify: Change_requires_reboot
#  block:
#      - name: "1.2.5 | PATCH | Ensure updates, patches, and additional security software are installed | Patch"
#        ansible.builtin.package:
#            name: "*"
#            state: latest
#
#      - name: "1.2.5 | PATCH | Ensure updates, patches, and additional security software are installed | update_facts"
#        ansible.builtin.package_facts:
#            manager: auto
#
#- name: "1.2.5 | PATCH | Ensure updates, patches, and additional security software are installed | limit kernels"
#
#  ansible.builtin.lineinfile:
#      path: /etc/yum.conf
#      regexp: ^installonly_limit=
#      line: installonly_limit={{ rhel7cis_installed_kernel_limit }}
#
