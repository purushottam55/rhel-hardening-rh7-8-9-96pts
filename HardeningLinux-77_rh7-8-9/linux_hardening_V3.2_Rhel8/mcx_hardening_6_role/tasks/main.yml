---
# tasks file for ./mcx_hardening_6_role

- name: "6.1.10  Ensure permissions on /etc/shells are configured"
  ansible.builtin.file:
      path: /etc/shells
      owner: root
      group: root
      mode: u-x,go-wx


#(6.1.12) (7.1.12)		Ensure no unowned or ungrouped files or directories exist 

# Takes so longer 
#- name: 6.1.11 Ensure no world writable files exist
#  block:
#    - name: 6.1.11 Ensure no world writable files exist | Get list of world-writable files
#      shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002
#      register: output_6_1_11
#    - name: 6.1.11 Ensure no world writable files exist | Adjust world-writable files if they exist (Configurable)
#      file:
#        path: '{{ item }}'
#        mode: o-w
#      loop: "{{ output_6_1_11.stdout_lines }}"
#      when: output_6_1_11.stdout_lines is defined and output_6_1_11.stdout_lines | length > 0


- name: 6.1.12 Ensure no unowned files or directories exist (Automated)
  block:
    - name: 6.1.12 Ensure no unowned files or directories exist (Automated) | Find
      shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser
      register: output_6_1_12
    - name: 6.1.12 Ensure no unowned files or directories exist (Automated) | Fix
      file:
        path: "{{ item }}"
        owner: root
        group: root
      loop: "{{ output_6_1_12.stdout_lines }}"
      when: output_6_1_12.stdout_lines is defined and output_6_1_12.stdout_lines | length > 0


- name: 6.1.13 Ensure no ungrouped files or directories exist (Automated)
  block:
    - name: 6.1.13 Ensure no ungrouped files or directories exist (Automated) | Find
      shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup
      register: output_6_1_13
    - name: 6.1.13 Ensure no ungrouped files or directories exist (Automated) | Fix
      file:
        path: "{{ item }}"
        owner: root
        group: root
      loop: "{{ output_6_1_13.stdout_lines }}"
      when: output_6_1_13.stdout_lines is defined and output_6_1_13.stdout_lines | length > 0




#=====================================As ran on 91.72 taken 2 hours and making mojor changes : SUID and GUID. CRITICAL POINT. : thousands of files permissions changed. Below task.



#- name: "6.1.13 | AUDIT | Ensure SUID and SGID files are reviewed"
#  vars:
#    warn_control_id: '6.1.13'
#  block:
#    - name: "6.1.13 | AUDIT | Ensure SUID executables are reviewed | Find SUID executables"d
#      ansible.builtin.shell: find {{ item.mount }} -xdev -type f -perm -4000 -not -fstype nfs
#      changed_when: false
#      failed_when: false
#      check_mode: false
#      register: rhel7cis_6_1_13_suid_executables
#      loop: "{{ ansible_facts.mounts }}"
#      loop_control:
#        label: "{{ item.mount }}"
#
#    - name: "6.1.13 | AUDIT | Ensure SUID and SGID files are reviewed | Find all SGID executables"
#      ansible.builtin.shell: find {{ item.mount }} -xdev -type f -perm -2000 -not -fstype nfs
#      changed_when: false
#      failed_when: false
#      check_mode: false
#      register: rhel7cis_6_1_13_sgid_executables
#      loop: "{{ ansible_facts.mounts }}"
#      loop_control:
#        label: "{{ item.mount }}"
#
#    - name: "6.1.13 | AUDIT | Ensure SUID and SGID files are reviewed | Flatten suid_executables results for easier use"
#      ansible.builtin.set_fact:
#        rhel7cis_6_1_13_suid_executables_flatten: "{{ rhel7cis_6_1_13_suid_executables.results | map(attribute='stdout_lines') | flatten }}"
#
#    - name: "6.1.13 | AUDIT | Ensure SUID and SGID files are reviewed | Set fact SGID executables"
#      ansible.builtin.set_fact:
#        rhel7cis_6_1_13_sgid_executables_flatten: "{{ rhel7cis_6_1_13_sgid_executables.results | map(attribute='stdout_lines') | flatten }}"
#
##    - name: "6.1.13 | PATCH | Ensure SUID and SGID files are reviewed | Remove SUID bit"
##      ansible.builtin.file:
##        path: "{{ item }}"
##        mode: 'u-s'
##      loop: "{{ rhel7cis_6_1_13_suid_executables_flatten }}"
##
##    - name: "6.1.13 | PATCH | Audit SGID executables | Remove SGID bit"
##      ansible.builtin.file:
##        path: "{{ item }}"
##        mode: 'g-s'
##      with_items:
##        - "{{ rhel7cis_6_1_13_sgid_executables_flatten }}"
#
#    - name: "6.1.13 | WARN | Ensure SUID and SGID files are reviewed | Alert SUID executables exist"
#      ansible.builtin.debug:
#        msg:
#          - "Warning!! You have SUID executables"
#          - "The files are listed below, please confirm the integrity of these binaries"
#          - "{{ rhel7cis_6_1_13_suid_executables_flatten }}"
#
#    - name: "6.1.13 | WARN | Ensure SUID and SGID files are reviewed | Alert SGID executables exist"
#      ansible.builtin.debug:
#        msg:
#          - "Warning!! You have SGID executables"
#          - "The files listed below, please review the integrity of these binaries"
#          - "{{ rhel7cis_6_1_13_sgid_executables_flatten }}"
#
#    - name: "6.1.13 | WARN | Ensure SUID and SGID files are reviewed | Warn Count"
#      ansible.builtin.import_tasks:
#        file: warning_facts.yml
#######################################



- name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords"
  vars:
      warn_control_id: '6.2.1'
  block:
      - name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords | Get users not using shadowed passwords"
        ansible.builtin.shell: awk -F':' '($2 != "x" ) { print $1}' /etc/passwd
        changed_when: false
        failed_when: false
        register: rhel7cis_6_2_1_nonshadowed_users

      - name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords | Warn on findings"
        when: rhel7cis_6_2_1_nonshadowed_users.stdout | length > 0
        ansible.builtin.debug:
            msg:
                - "Warning!! You have users that are not using a shadowed password. Please convert the below accounts to use a shadowed password"
                - "{{ rhel7cis_6_2_1_nonshadowed_users.stdout_lines }}"

      - name: "6.2.1 | WARN | Ensure accounts in /etc/passwd use shadowed passwords | warn_count"
        when: rhel7cis_6_2_1_nonshadowed_users.stdout | length > 0
        ansible.builtin.import_tasks:
            file: warning_facts.yml

      - name: "6.2.1 | Remediate | Run pwconv to convert passwords to shadow"
        ansible.builtin.command: pwconv
        become: true


#==========================================
#
- name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords"
  vars:
      warn_control_id: '6.2.1'
  block:
      - name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords | Get users not using shadowed passwords"
        ansible.builtin.shell: awk -F':' '($2 != "x" ) { print $1}' /etc/passwd
        changed_when: false
        failed_when: false
        register: rhel7cis_6_2_1_nonshadowed_users

      - name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords | Warn on findings"
        when: rhel7cis_6_2_1_nonshadowed_users.stdout | length > 0
        ansible.builtin.debug:
            msg:
                - "Warning!! You have users that are not using a shadowed password. Please convert the below accounts to use a shadowed password"
                - "{{ rhel7cis_6_2_1_nonshadowed_users.stdout_lines }}"

      - name: "6.2.1 | WARN | Ensure accounts in /etc/passwd use shadowed passwords | warn_count"
        when: rhel7cis_6_2_1_nonshadowed_users.stdout | length > 0
        ansible.builtin.import_tasks:
            file: warning_facts.yml

      - name: "6.2.1 | Remediate | Run pwconv to convert passwords to shadow"
        ansible.builtin.command: pwconv
        become: true

#=================================================
#--------

#- name: "6.2.8 | PATCH | Ensure root PATH Integrity"
#  block:
#
#    - name: "6.2.8 | AUDIT | Get root PATH variable"
#      ansible.builtin.shell: sudo -Hiu root env | grep '^PATH' | cut -d= -f2
#      changed_when: false
#      register: root_path_string
#
#    - name: "6.2.8 | AUDIT | Split root PATH entries"
#      set_fact:
#        root_path_list: "{{ root_path_string.stdout.split(':') }}"
#
#    - name: "6.2.8 | AUDIT | Check for empty directory (::) in PATH"
#      ansible.builtin.shell: "echo '{{ root_path_string.stdout }}' | grep -q '::'"
#      register: check_empty_dir
#      failed_when: false
#      changed_when: false
#
#    - name: "6.2.8 | AUDIT | Check for trailing colon in PATH"
#      ansible.builtin.shell: "echo '{{ root_path_string.stdout }}' | grep -q ':$'"
#      register: check_trailing_colon
#      failed_when: false
#      changed_when: false
#
#    - name: "6.2.8 | DEBUG | Report empty or trailing colon warnings"
#      debug:
#        msg: >
#          {%- if check_empty_dir.rc == 0 and check_trailing_colon.rc == 0 -%}
#            WARNING: PATH contains empty directory (::) and trailing colon (:)
#          {%- elif check_empty_dir.rc == 0 -%}
#            WARNING: PATH contains empty directory (::)
#          {%- elif check_trailing_colon.rc == 0 -%}
#            WARNING: PATH contains trailing colon (:)
#          {%- else -%}
#            PATH format looks OK.
#          {%- endif -%}
#
#    - name: "6.2.8 | AUDIT | Get stat for all PATH directories"
#      ansible.builtin.stat:
#        path: "{{ item }}"
#      loop: "{{ root_path_list }}"
#      register: root_path_stats
#
#    - name: "6.2.8 | PATCH | Correct ownership and permissions on PATH directories"
#      ansible.builtin.file:
#        path: "{{ item.stat.path }}"
#        state: directory
#        owner: root
#        group: root
#        mode: '0755'
#        follow: false
#      when:
#        - item.stat.exists
#        - item.stat.isdir
#        - item.stat.pw_name != 'root' or item.stat.gr_name != 'root' or item.stat.mode|int(base=8) != 755
#      loop: "{{ root_path_stats.results }}"
#      loop_control:
#        label: "{{ item.item }}"
# For above point bit is setting 0 : major changes are happening : ex. unable to use sudo.
